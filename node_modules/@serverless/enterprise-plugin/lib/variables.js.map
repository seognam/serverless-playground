{"version":3,"sources":["../../lib/variables.js"],"names":["_","require","resolveOutput","resolveParams","getValueFromDashboardParams","ctx","variableString","variableName","slice","indexOf","state","secretsUsed","add","sls","processedInput","commands","interactiveCli","secrets","org","service","app","stage","provider","getStage","classes","Error","getValueFromDashboardOutputs","variableParts","split","key","region","getRegion","length","outputName","subkey","value","get","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst resolveOutput = require('./resolveOutput');\nconst resolveParams = require('./resolveParams');\n\n// functions for new way of getting variables\nconst getValueFromDashboardParams = ctx => async variableString => {\n  const variableName = variableString.slice(variableString.indexOf(':') + 1);\n  ctx.state.secretsUsed.add(variableName);\n  if (\n    ctx.sls.processedInput.commands[0] === 'login' ||\n    ctx.sls.processedInput.commands[0] === 'logout' ||\n    ctx.sls.interactiveCli\n  ) {\n    return '';\n  }\n\n  const secrets = await resolveParams({\n    org: ctx.sls.service.org,\n    app: ctx.sls.service.app,\n    stage: ctx.provider.getStage(),\n  });\n  if (!secrets[variableName]) {\n    throw new ctx.sls.classes.Error(`$\\{${variableString}} not defined`);\n  }\n  return secrets[variableName];\n};\n\nconst getValueFromDashboardOutputs = ctx => async variableString => {\n  if (\n    ctx.sls.processedInput.commands[0] === 'login' ||\n    ctx.sls.processedInput.commands[0] === 'logout' ||\n    ctx.sls.interactiveCli\n  ) {\n    return '';\n  }\n  const variableParts = variableString.split(':').slice(1);\n  let service;\n  let key;\n  let app = ctx.sls.service.app;\n  let stage = ctx.provider.getStage();\n  let region = ctx.provider.getRegion();\n  if (variableParts.length === 1) {\n    service = variableParts[0].split('.', 1)[0];\n    key = variableParts[0].slice(service.length);\n  } else if (variableParts.length === 4) {\n    service = variableParts[3].split('.', 1)[0];\n    key = variableParts[3].slice(service.length);\n    if (variableParts[0]) {\n      app = variableParts[0];\n    }\n    if (variableParts[1]) {\n      stage = variableParts[1];\n    }\n    if (variableParts[2]) {\n      region = variableParts[2];\n    }\n  } else {\n    throw new ctx.sls.classes.Error(\n      '`${${variableString}}` does not conform to syntax ${outputs:service.key} or ${outputs:app:stage:region:service.key}'\n    );\n  }\n  const outputName = key.split('.')[1];\n  const subkey = key.slice(outputName.length + 2);\n  const value = resolveOutput(outputName, {\n    service,\n    app,\n    org: ctx.sls.service.org,\n    stage,\n    region,\n  });\n  if (subkey) {\n    return _.get(value, subkey);\n  }\n  return value;\n};\n\nmodule.exports = {\n  getValueFromDashboardParams,\n  getValueFromDashboardOutputs,\n};\n"],"file":"variables.js"}